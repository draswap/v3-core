/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestDraswapV3ReentrantCalleeInterface extends ethers.utils.Interface {
  functions: {
    "draswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "swapToReenter(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "draswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToReenter",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "draswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToReenter",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestDraswapV3ReentrantCallee extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestDraswapV3ReentrantCalleeInterface;

  functions: {
    draswapV3SwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "draswapV3SwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapToReenter(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToReenter(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  draswapV3SwapCallback(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "draswapV3SwapCallback(int256,int256,bytes)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapToReenter(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToReenter(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    draswapV3SwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "draswapV3SwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToReenter(pool: string, overrides?: CallOverrides): Promise<void>;

    "swapToReenter(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    draswapV3SwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "draswapV3SwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapToReenter(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "swapToReenter(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    draswapV3SwapCallback(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "draswapV3SwapCallback(int256,int256,bytes)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapToReenter(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToReenter(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
